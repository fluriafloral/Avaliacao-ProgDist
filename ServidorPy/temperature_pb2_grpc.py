# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import temperature_pb2 as temperature__pb2


class TemperatureConverterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CelsiusToFahrenheit = channel.unary_unary(
                '/temperature.TemperatureConverter/CelsiusToFahrenheit',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )
        self.FahrenheitToCelsius = channel.unary_unary(
                '/temperature.TemperatureConverter/FahrenheitToCelsius',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )
        self.CelsiusToKelvin = channel.unary_unary(
                '/temperature.TemperatureConverter/CelsiusToKelvin',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )
        self.KelvinToCelsius = channel.unary_unary(
                '/temperature.TemperatureConverter/KelvinToCelsius',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )
        self.KelvinToFahrenheit = channel.unary_unary(
                '/temperature.TemperatureConverter/KelvinToFahrenheit',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )
        self.FahrenheitToKelvin = channel.unary_unary(
                '/temperature.TemperatureConverter/FahrenheitToKelvin',
                request_serializer=temperature__pb2.TemperatureRequest.SerializeToString,
                response_deserializer=temperature__pb2.TemperatureResponse.FromString,
                )


class TemperatureConverterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CelsiusToFahrenheit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FahrenheitToCelsius(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CelsiusToKelvin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KelvinToCelsius(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KelvinToFahrenheit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FahrenheitToKelvin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemperatureConverterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CelsiusToFahrenheit': grpc.unary_unary_rpc_method_handler(
                    servicer.CelsiusToFahrenheit,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
            'FahrenheitToCelsius': grpc.unary_unary_rpc_method_handler(
                    servicer.FahrenheitToCelsius,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
            'CelsiusToKelvin': grpc.unary_unary_rpc_method_handler(
                    servicer.CelsiusToKelvin,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
            'KelvinToCelsius': grpc.unary_unary_rpc_method_handler(
                    servicer.KelvinToCelsius,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
            'KelvinToFahrenheit': grpc.unary_unary_rpc_method_handler(
                    servicer.KelvinToFahrenheit,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
            'FahrenheitToKelvin': grpc.unary_unary_rpc_method_handler(
                    servicer.FahrenheitToKelvin,
                    request_deserializer=temperature__pb2.TemperatureRequest.FromString,
                    response_serializer=temperature__pb2.TemperatureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'temperature.TemperatureConverter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TemperatureConverter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CelsiusToFahrenheit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/CelsiusToFahrenheit',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FahrenheitToCelsius(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/FahrenheitToCelsius',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CelsiusToKelvin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/CelsiusToKelvin',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KelvinToCelsius(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/KelvinToCelsius',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KelvinToFahrenheit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/KelvinToFahrenheit',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FahrenheitToKelvin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/temperature.TemperatureConverter/FahrenheitToKelvin',
            temperature__pb2.TemperatureRequest.SerializeToString,
            temperature__pb2.TemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
